{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ContentChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nlet SignupCorporate1 = class SignupCorporate1 {\n  constructor(fb, http, router // Inject Router\n  ) {\n    this.fb = fb;\n    this.http = http;\n    this.router = router;\n    this.rootClassName = '';\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.passwordType = 'password';\n    this.confirmPasswordType = 'password';\n  }\n\n  ngOnInit() {\n    this.signupForm = this.fb.group({\n      first_name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]],\n      last_name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]],\n      company_name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]],\n      phone_number: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)], [this.phoneExistsValidator()]],\n      email: ['', [Validators.required, Validators.email], [this.emailExistsValidator()]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirm_password: ['', Validators.required]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n\n  passwordMatchValidator(form) {\n    return form.get('password').value === form.get('confirm_password').value ? null : {\n      mismatch: true\n    };\n  }\n\n  togglePasswordVisibility() {\n    this.passwordType = this.passwordType === 'password' ? 'text' : 'password';\n  }\n\n  toggleConfirmPasswordVisibility() {\n    this.confirmPasswordType = this.confirmPasswordType === 'password' ? 'text' : 'password';\n  }\n\n  sanitizePhoneNumber(event) {\n    const input = event.target;\n    const sanitizedValue = input.value.replace(/\\D/g, '').slice(0, 10);\n    this.signupForm.get('phone_number').setValue(sanitizedValue, {\n      emitEvent: false\n    });\n  }\n\n  onSubmit() {\n    if (this.signupForm.valid) {\n      const formData = {\n        first_name: this.signupForm.get('first_name').value,\n        last_name: this.signupForm.get('last_name').value,\n        company_name: this.signupForm.get('company_name').value,\n        phone_number: this.signupForm.get('phone_number').value,\n        email: this.signupForm.get('email').value,\n        password: this.signupForm.get('password').value\n      };\n      this.http.post('http://localhost:8000/signup-corporate/', formData).subscribe(response => {\n        console.log('Signup successful', response);\n        this.successMessage = 'Signup successful! Redirecting...';\n        this.errorMessage = ''; // Redirect to recruiter-view-3rd-page after a short delay\n\n        setTimeout(() => {\n          this.router.navigate(['/recruiter-view-3rd-page']);\n        }, 2000); // 2-second delay to show the success message\n      }, error => {\n        console.log('Error response:', error);\n\n        if (error.status === 400 && error.error.error) {\n          this.errorMessage = error.error.error;\n        } else if (error.status === 500 || error.status === 503) {\n          this.errorMessage = error.error.error || 'Server error. Please try again later.';\n        } else {\n          this.errorMessage = 'Signup failed. Please try again.';\n        }\n\n        this.successMessage = '';\n      });\n    }\n  }\n\n  phoneExistsValidator() {\n    return control => {\n      const phone = control.value;\n      if (!phone) return of(null);\n      return this.http.get(`http://localhost:8000/check/phone/?phone=${phone}`).pipe(map(res => res.exists ? {\n        phoneExists: true\n      } : null), catchError(() => of(null)));\n    };\n  }\n\n  emailExistsValidator() {\n    return control => {\n      const email = control.value;\n      if (!email) return of(null);\n      return this.http.get(`http://localhost:8000/check/email/?email=${email}`).pipe(map(res => res.exists ? {\n        emailExists: true\n      } : null), catchError(() => of(null)));\n    };\n  }\n\n};\n\n__decorate([ContentChild('button')], SignupCorporate1.prototype, \"button\", void 0);\n\n__decorate([ContentChild('text12')], SignupCorporate1.prototype, \"text12\", void 0);\n\n__decorate([ContentChild('text13')], SignupCorporate1.prototype, \"text13\", void 0);\n\n__decorate([ContentChild('text1111')], SignupCorporate1.prototype, \"text1111\", void 0);\n\n__decorate([Input()], SignupCorporate1.prototype, \"rootClassName\", void 0);\n\n__decorate([ContentChild('text')], SignupCorporate1.prototype, \"text\", void 0);\n\n__decorate([ContentChild('text1')], SignupCorporate1.prototype, \"text1\", void 0);\n\n__decorate([ContentChild('text11')], SignupCorporate1.prototype, \"text11\", void 0);\n\n__decorate([ContentChild('text5')], SignupCorporate1.prototype, \"text5\", void 0);\n\n__decorate([ContentChild('text21')], SignupCorporate1.prototype, \"text21\", void 0);\n\n__decorate([ContentChild('heading')], SignupCorporate1.prototype, \"heading\", void 0);\n\n__decorate([ContentChild('text111')], SignupCorporate1.prototype, \"text111\", void 0);\n\n__decorate([ContentChild('text2')], SignupCorporate1.prototype, \"text2\", void 0);\n\n__decorate([ContentChild('text6')], SignupCorporate1.prototype, \"text6\", void 0);\n\n__decorate([ContentChild('text71')], SignupCorporate1.prototype, \"text71\", void 0);\n\nSignupCorporate1 = __decorate([Component({\n  selector: 'signup-corporate1',\n  templateUrl: 'signup-corporate1.component.html',\n  styleUrls: ['signup-corporate1.component.css']\n})], SignupCorporate1);\nexport { SignupCorporate1 };","map":null,"metadata":{},"sourceType":"module"}