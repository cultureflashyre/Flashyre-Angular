{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ContentChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nlet SignupCorporate1 = class SignupCorporate1 {\n  constructor(fb, http, router, logger // Inject LoggerService\n  ) {\n    this.fb = fb;\n    this.http = http;\n    this.router = router;\n    this.logger = logger;\n    this.rootClassName = '';\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.passwordType = 'password';\n    this.confirmPasswordType = 'password';\n  }\n\n  ngOnInit() {\n    this.signupForm = this.fb.group({\n      first_name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]],\n      last_name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]],\n      company_name: ['', Validators.required],\n      phone_number: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)], [this.phoneExistsValidator()]],\n      email: ['', [Validators.required, Validators.email], [this.emailExistsValidator()]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirm_password: ['', Validators.required]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n    this.logger.debug('SignupCorporate1 component initialized');\n  }\n\n  passwordMatchValidator(control) {\n    var _a, _b;\n\n    return ((_a = control.get('password')) === null || _a === void 0 ? void 0 : _a.value) === ((_b = control.get('confirm_password')) === null || _b === void 0 ? void 0 : _b.value) ? null : {\n      mismatch: true\n    };\n  }\n\n  togglePasswordVisibility() {\n    this.passwordType = this.passwordType === 'password' ? 'text' : 'password';\n  }\n\n  toggleConfirmPasswordVisibility() {\n    this.confirmPasswordType = this.confirmPasswordType === 'password' ? 'text' : 'password';\n  }\n\n  sanitizePhoneNumber(event) {\n    var _a;\n\n    const input = event.target;\n    const sanitizedValue = input.value.replace(/\\D/g, '').slice(0, 10);\n    (_a = this.signupForm.get('phone_number')) === null || _a === void 0 ? void 0 : _a.setValue(sanitizedValue, {\n      emitEvent: false\n    });\n  }\n\n  onSubmit() {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    if (this.signupForm.valid) {\n      this.logger.debug('Submitting signup form with data:', this.signupForm.value);\n      const formData = {\n        first_name: (_a = this.signupForm.get('first_name')) === null || _a === void 0 ? void 0 : _a.value,\n        last_name: (_b = this.signupForm.get('last_name')) === null || _b === void 0 ? void 0 : _b.value,\n        company_name: (_c = this.signupForm.get('company_name')) === null || _c === void 0 ? void 0 : _c.value,\n        phone_number: (_d = this.signupForm.get('phone_number')) === null || _d === void 0 ? void 0 : _d.value,\n        email: (_e = this.signupForm.get('email')) === null || _e === void 0 ? void 0 : _e.value,\n        password: (_f = this.signupForm.get('password')) === null || _f === void 0 ? void 0 : _f.value,\n        confirm_password: (_g = this.signupForm.get('confirm_password')) === null || _g === void 0 ? void 0 : _g.value\n      };\n      this.logger.debug('Payload being sent:', formData);\n      this.http.post('http://localhost:8000/api/signup-corporate/', formData).subscribe(response => {\n        this.logger.info('Signup successful', response);\n        this.successMessage = 'Signup successful! Redirecting to login...';\n        this.errorMessage = ''; // Clear any previous error messages\n\n        setTimeout(() => {\n          this.router.navigate(['/login-corporate']);\n        }, 2000);\n      }, error => {\n        this.logger.error('Signup failed with status:', error.status, error.error);\n        this.errorMessage = this.getErrorMessage(error);\n        this.successMessage = ''; // Clear any previous success messages\n      });\n    } else {\n      this.handleInvalidForm();\n    }\n  }\n\n  handleInvalidForm() {\n    const invalidControls = [];\n\n    for (const controlName in this.signupForm.controls) {\n      const control = this.signupForm.get(controlName);\n\n      if (control === null || control === void 0 ? void 0 : control.invalid) {\n        invalidControls.push({\n          name: controlName,\n          errors: control.errors\n        });\n      }\n    }\n\n    this.logger.error('Form invalid. Invalid controls:', invalidControls);\n    this.errorMessage = 'Please fill in all required fields correctly.';\n  }\n\n  getErrorMessage(error) {\n    if (error.status === 400 && error.error) {\n      if (error.error.first_name) return error.error.first_name[0] || 'Invalid first name.';\n      if (error.error.last_name) return error.error.last_name[0] || 'Invalid last name.';\n      if (error.error.company_name) return error.error.company_name[0] || 'Company Name is Required';\n      if (error.error.phone_number) return error.error.phone_number[0] || 'Phone number already exists!';\n      if (error.error.email) return error.error.email[0] || 'Email already exists!';\n      if (error.error.password) return error.error.password[0] || 'Invalid password.';\n      if (error.error.confirm_password) return error.error.confirm_password[0] || 'Passwords do not match.';\n      if (error.error.non_field_errors) return error.error.non_field_errors[0] || 'Invalid data.';\n    }\n\n    return 'Signup failed. Please try again.';\n  }\n\n  phoneExistsValidator() {\n    return control => {\n      const phone = control.value;\n      if (!phone) return of(null);\n      return this.http.get(`http://localhost:8000/api/check-phone/?phone=${phone}`).pipe(map(res => res.exists ? {\n        phoneExists: true\n      } : null), catchError(() => of(null)));\n    };\n  }\n\n  emailExistsValidator() {\n    return control => {\n      const email = control.value;\n      if (!email) return of(null);\n      return this.http.get(`http://localhost:8000/api/check-email/?email=${email}`).pipe(map(res => res.exists ? {\n        emailExists: true\n      } : null), catchError(() => of(null)));\n    };\n  }\n\n  navigateToLogin() {\n    this.router.navigate(['/login-corporate']);\n  }\n\n};\n\n__decorate([ContentChild('button')], SignupCorporate1.prototype, \"button\", void 0);\n\n__decorate([ContentChild('text12')], SignupCorporate1.prototype, \"text12\", void 0);\n\n__decorate([ContentChild('text13')], SignupCorporate1.prototype, \"text13\", void 0);\n\n__decorate([ContentChild('text1111')], SignupCorporate1.prototype, \"text1111\", void 0);\n\n__decorate([Input()], SignupCorporate1.prototype, \"rootClassName\", void 0);\n\n__decorate([ContentChild('text')], SignupCorporate1.prototype, \"text\", void 0);\n\n__decorate([ContentChild('text1')], SignupCorporate1.prototype, \"text1\", void 0);\n\n__decorate([ContentChild('text11')], SignupCorporate1.prototype, \"text11\", void 0);\n\n__decorate([ContentChild('text5')], SignupCorporate1.prototype, \"text5\", void 0);\n\n__decorate([ContentChild('text21')], SignupCorporate1.prototype, \"text21\", void 0);\n\n__decorate([ContentChild('heading')], SignupCorporate1.prototype, \"heading\", void 0);\n\n__decorate([ContentChild('text111')], SignupCorporate1.prototype, \"text111\", void 0);\n\n__decorate([ContentChild('text2')], SignupCorporate1.prototype, \"text2\", void 0);\n\n__decorate([ContentChild('text6')], SignupCorporate1.prototype, \"text6\", void 0);\n\n__decorate([ContentChild('text71')], SignupCorporate1.prototype, \"text71\", void 0);\n\nSignupCorporate1 = __decorate([Component({\n  selector: 'signup-corporate1',\n  templateUrl: 'signup-corporate1.component.html',\n  styleUrls: ['signup-corporate1.component.css']\n})], SignupCorporate1);\nexport { SignupCorporate1 };","map":null,"metadata":{},"sourceType":"module"}